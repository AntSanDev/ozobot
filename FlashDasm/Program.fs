open System

let value = function
    | 'K' -> 0 // 000 (BGR)
    | 'R' -> 1 // 001 B
    | 'G' -> 2 // 010 G
    | 'Y' -> 3 // 011 R+G
    | 'B' -> 4 // 100 B
    | 'M' -> 5 // 101 R+B
    | 'C' -> 6 // 110 G+B
    | 'W' -> failwith "White is not used as a direct digit value"
    | c -> sprintf "Unknown color code: %c" c |> failwith

let byteValue = function
    | [|c2; c1; c0|] ->
        let v2 = value c2
        let v1 = value c1
        let v0 = value c0
        v0 + (v1 * 7) + (v2 * 49)
    | _ -> failwith "Expected sequence of sets of three colors"

let removeWhites code =
    Seq.append code ['W'] // always end with W
    |> Seq.append ['W'] |> Seq.pairwise
    |> Seq.map (fun (a, b) -> if b = 'W' then a else b)
    |> String.Concat

let dasm (name, code) =
    printf "Dasm: %s" name
    let codeWithoutWhites = removeWhites code
    // printfn "Code:      %s" code
    // printfn "Code (!W): %s" codeWithoutWhites
    codeWithoutWhites
    |> Seq.chunkBySize 3
    |> Seq.map byteValue
    |> Seq.iter (fun v -> printf "%03i " v)
    printfn ""

type Program = { Name: string; Code: string }

let turnLEDoffPaid   = "turn LED off (paid)", "CRYCYMCRWKWRKWYBRBKWKWRMKCYKMRYKWKWKWKWKWKYMGKWKWBGYKWKWKYWCKMYCM"
// dasm turnLEDoffPaid
let turnLEDoffUnpaid = "turn LED off (paid)", "CRYCYMCRWKWRKWYBRYKWKWRCBKYKCYKMRYKWKWKWKWKWKYMGKWKWBGYKWKWKYWCRCBCM"
// dasm turnLEDoffUnpaid

//      CRY CYM CRW KWR KWY LEN ??? LEN PAY ??? ??? ??? RRR GGG BBB LED ??? ??? ??? ??? ??? CRC TRM
// Paid 304 320 302 001 003 207 000 012     045 036 147 000 000 000 184 000 030 147 000 174 038 334
// Not  304 320 302 001 003 206 000 013 199 045 036 147 000 000 000 184 000 030 147 000 174 095 334

let wait100x10msPaid   = "wait 100 x 10ms (paid)", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWGKGYRWKWKYWCGCBCM"
// dasm wait100x10msPaid
let wait100x10msUnpaid = "wait 100 x 10ms (paid)", "CRYCYMCRWKWRKWYBGRKWKWRWBKYKCYKMRYKWGKGYRWKWKYWCBKMCM"
// dasm wait100x10msUnpaid

//      CRY CYM CRW KWR KWY LEN ??? LEN PAY ??? ??? ??? 100 WAT ??? ??? CRC TRM
// Paid 304 320 302 001 003 212 000 007     045 036 147 100 155 000 174 144 334
// Not  304 320 302 001 003 211 000 008 199 045 036 147 100 155 000 174 201 334

let waitAndTurnOff = "wait and turn off", "CRYCYMCRWKWRKWYBRWKWKWGRBKYKCYKMRYKWGKGYRWKWKWKWKWKYMGKWKWBGYKWKWKYWCRCMCM"
// dasm waitAndTurnOff
let turnOffAndWait = "turn off and wait", "CRYCYMCRWKWRKWYBRWKWKWGRBKYKCYKMRYKWKWKWKWKWKYMGKWKWBGYKWGKGYRWKWKYWCRCMCM"
// dasm turnOffAndWait

//          CRY CYM CRW KWR KWY LEN ??? LEN PAY ??? ??? ??? 100 WAT RRR GGG BBB LED ??? ??? ??? ??? ??? CRC TRM
// Wait/Off 304 320 302 001 003 204 000 015 199 045 036 147 100 155 000 000 000 184 000 030 147 000 174 096 334

//          CRY CYM CRW KWR KWY LEN ??? LEN PAY ??? ??? ??? RRR GGG BBB LED ??? ??? ??? 100 WAT ??? ??? ??? ???
// Off/Wait 304 320 302 001 003 204 000 015 199 045 036 147 000 000 000 184 000 030 147 100 155 000 174 096 334 // note: same CRC

let setLEDtoRG = "set LED color (Red=127, Green=127, Blue=0)", "CRYCYMCRWKWRKWYBRCKWKWRYBKYKCYKMRYKWGBRGBRKWKYMGKWKYWCKGBCM"
// dasm setLEDtoRG

// CRY CYM CRW KWR KWY LEN ??? LEN PAY ??? ??? ??? RRR GGG BBB LED ??? ??? CRC TRM
// 304 320 302 001 003 209 000 010 199 045 036 147 127 127 000 184 000 174 018 334

let setLEDto123 = "set LED color (Red=1, Green=2, Blue=3)", "CRYCYMCRWKWRKWYBRCKWKWRYBKYKCYKMRYKWKWRKWGK[WYWMGKWKYWCKRYCM"
// dasm setLEDto123

// CRY CYM CRW KWR KWY LEN ??? LEN PAY ??? ??? ??? RRR GGG BBB LED ??? ??? CRC TRM
// 304 320 302 001 003 209 000 010 199 045 036 147 001 002 003 184 000 174 010 334

// XXX 155                     - wait XXX x 10ms
// RRR GGG BBB 184 000         - set LED
// RRR GGG BBB 184 000 030 147 - set LED + ?

let christmasTree = "christmas tree", "CRYCYMCRWKWRKWYWGMKWKRKBWKYKCYKMRYKWGCBKWKWRGKWKYWCKYCGCWKBKGCWKBRGCWKWKGKGKWKYMGRBYWRWGKGKWKWKWYMGRKRYRWKWKGKGKWKYMGRBYWRWGKGWKGKWKYMGRKRYRWKWKGKGKWKYMGRBYWRWKWKWKWGKGYMGRKRYRWYMGWCMYWKCM"
// dasm christmasTree

// CRY CYM CRW KWR KWY LEN ??? LEN PAY ??? ??? ???                                                         LED     WAT             LED     WAT             LED     WAT             LED     WAT             LED     WAT             LED     WAT LED
// 304 320 302 001 003 166 000 053 199 045 036 147 144 000 009 000 174 027 146 028 146 029 146 000 100 000 184 080 155 100 000 000 184 050 155 000 100 000 184 080 155 100 100 000 184 050 155 000 100 000 184 080 155 000 000 100 184 050 155 184 145 168 334

let waitNx10ms = [
    "wait00x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKWKYRWKWKYWCBCWCM"
    "wait01x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKWRYRWKWKYWCBCMCM"
    "wait02x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKWGYRWKWKYWCBCBCM"
    "wait03x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKWYWRWKWKYWCBCYCM"
    "wait04x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKWBYRWKWKYWCBCGCM"
    "wait05x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKWMYRWKWKYWCBCRCM"
    "wait06x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKWCYRWKWKYWCBCKCM"
    "wait07x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKRKYRWKWKYWCBMCWM"
    "wait08x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKRWYRWKWKYWCBMWCM"
    "wait09x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKRGYRWKWKYWCBMBCM"
    "wait10x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKRYWRWKWKYWCBMYCM"
    "wait11x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKRBYRWKWKYWCBMGCM"
    "wait12x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKRMYRWKWKYWCBMRCM"
    "wait13x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKRCYRWKWKYWCBMKCM"
    "wait14x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKGKYRWKWKYWCBWCWM"
    "wait15x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKGRYRWKWKYWCBWMCM"
    "wait16x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKGWYRWKWKYWCBWBCM"
    "wait17x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKGYWRWKWKYWCBWYCM"
    "wait18x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKGBYRWKWKYWCBWGCM"
    "wait19x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKGMYRWKWKYWCBWRCM"
    "wait20x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKGCYRWKWKYWCBWKCM"
    "wait21x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKYKYRWKWKYWCBYCWM"
    "wait22x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKYRYRWKWKYWCBYMCM"
    "wait23x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKYGYRWKWKYWCBYBCM"
    "wait24x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKYWYRWKWKYWCBYWCM"
    "wait25x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKYBYRWKWKYWCBYGCM"
    "wait26x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKYMYRWKWKYWCBYRCM"
    "wait27x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKYCYRWKWKYWCBYKCM"
    "wait28x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKBKYRWKWKYWCBGCWM"
    "wait29x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKBRYRWKWKYWCBGMCM"
    "wait30x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKBGYRWKWKYWCBGBCM"
    "wait31x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKBYWRWKWKYWCBGYCM"
    "wait32x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKBWYRWKWKYWCBGWCM"
    "wait33x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKBMYRWKWKYWCBGRCM"
    "wait34x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKBCYRWKWKYWCBGKCM"
    "wait35x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKMKYRWKWKYWCBRCWM"
    "wait36x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKMRYRWKWKYWCBRMCM"
    "wait37x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKMGYRWKWKYWCBRBCM"
    "wait38x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKMYWRWKWKYWCBRYCM"
    "wait39x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKMBYRWKWKYWCBRGCM"
    "wait40x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKMWYRWKWKYWCBRWCM"
    "wait41x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKMCYRWKWKYWCBRKCM"
    "wait42x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKCKYRWKWKYWCBKCWM"
    "wait43x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKCRYRWKWKYWCBKMCM"
    "wait44x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKCGYRWKWKYWCBKBCM"
    "wait45x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKCYWRWKWKYWCBKYCM"
    "wait46x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKCBYRWKWKYWCBKGCM"
    "wait47x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKCMYRWKWKYWCBKRCM"
    "wait48x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWKCWYRWKWKYWCBKWCM"
    "wait49x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRKWYRWKWKYWCYCWCM"
    "wait50x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRKRYRWKWKYWCYCMCM"
    "wait51x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRKGYRWKWKYWCYCBCM"
    "wait52x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRKYWRWKWKYWCYCYCM"
    "wait53x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRKBYRWKWKYWCYCGCM"
    "wait54x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRKMYRWKWKYWCYCRCM"
    "wait55x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRKCYRWKWKYWCYCKCM"
    "wait56x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRWKYRWKWKYWCYMCWM"
    "wait57x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRWRYRWKWKYWCYMWCM"
    "wait58x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRWGYRWKWKYWCYMBCM"
    "wait59x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRWYWRWKWKYWCYMYCM"
    "wait60x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRWBYRWKWKYWCYMGCM"
    "wait61x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRWBYRWKWKYWCYMGCM"
    "wait62x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRWCYRWKWKYWCYMKCM"
    "wait63x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRGKYRWKWKYWCYBCWM"
    "wait64x10ms", "CRYCYMCRWKWRKWYBGWKWKWRKWCYKMRYKWRGRYRWKWKYWCYBMCM"]
waitNx10ms |> List.iter dasm

// CRY CYM CRW KWR KWY LEN                     NNN WAT         CRC TRM
// 304 320 302 001 003 212 000 007 045 036 147 000 155 000 174 244 334
// 304 320 302 001 003 212 000 007 045 036 147 001 155 000 174 243 334
// 304 320 302 001 003 212 000 007 045 036 147 002 155 000 174 242 334
// 304 320 302 001 003 212 000 007 045 036 147 003 155 000 174 241 334
// 304 320 302 001 003 212 000 007 045 036 147 004 155 000 174 240 334
// 304 320 302 001 003 212 000 007 045 036 147 005 155 000 174 239 334
// 304 320 302 001 003 212 000 007 045 036 147 006 155 000 174 238 334
// 304 320 302 001 003 212 000 007 045 036 147 007 155 000 174 237 334
// 304 320 302 001 003 212 000 007 045 036 147 008 155 000 174 236 334
// 304 320 302 001 003 212 000 007 045 036 147 009 155 000 174 235 334
// 304 320 302 001 003 212 000 007 045 036 147 010 155 000 174 234 334
// 304 320 302 001 003 212 000 007 045 036 147 011 155 000 174 233 334
// 304 320 302 001 003 212 000 007 045 036 147 012 155 000 174 232 334
// 304 320 302 001 003 212 000 007 045 036 147 013 155 000 174 231 334
// 304 320 302 001 003 212 000 007 045 036 147 014 155 000 174 230 334
// 304 320 302 001 003 212 000 007 045 036 147 015 155 000 174 229 334
// 304 320 302 001 003 212 000 007 045 036 147 016 155 000 174 228 334
// 304 320 302 001 003 212 000 007 045 036 147 017 155 000 174 227 334
// 304 320 302 001 003 212 000 007 045 036 147 018 155 000 174 226 334
// 304 320 302 001 003 212 000 007 045 036 147 019 155 000 174 225 334
// 304 320 302 001 003 212 000 007 045 036 147 020 155 000 174 224 334
// 304 320 302 001 003 212 000 007 045 036 147 021 155 000 174 223 334
// 304 320 302 001 003 212 000 007 045 036 147 022 155 000 174 222 334
// 304 320 302 001 003 212 000 007 045 036 147 023 155 000 174 221 334
// 304 320 302 001 003 212 000 007 045 036 147 024 155 000 174 220 334
// 304 320 302 001 003 212 000 007 045 036 147 025 155 000 174 219 334
// 304 320 302 001 003 212 000 007 045 036 147 026 155 000 174 218 334
// 304 320 302 001 003 212 000 007 045 036 147 027 155 000 174 217 334
// 304 320 302 001 003 212 000 007 045 036 147 028 155 000 174 216 334
// 304 320 302 001 003 212 000 007 045 036 147 029 155 000 174 215 334
// 304 320 302 001 003 212 000 007 045 036 147 030 155 000 174 214 334
// 304 320 302 001 003 212 000 007 045 036 147 031 155 000 174 213 334
// 304 320 302 001 003 212 000 007 045 036 147 032 155 000 174 212 334
// 304 320 302 001 003 212 000 007 045 036 147 033 155 000 174 211 334
// 304 320 302 001 003 212 000 007 045 036 147 034 155 000 174 210 334
// 304 320 302 001 003 212 000 007 045 036 147 035 155 000 174 209 334
// 304 320 302 001 003 212 000 007 045 036 147 036 155 000 174 208 334
// 304 320 302 001 003 212 000 007 045 036 147 037 155 000 174 207 334
// 304 320 302 001 003 212 000 007 045 036 147 038 155 000 174 206 334
// 304 320 302 001 003 212 000 007 045 036 147 039 155 000 174 205 334
// 304 320 302 001 003 212 000 007 045 036 147 040 155 000 174 204 334
// 304 320 302 001 003 212 000 007 045 036 147 041 155 000 174 203 334
// 304 320 302 001 003 212 000 007 045 036 147 042 155 000 174 202 334
// 304 320 302 001 003 212 000 007 045 036 147 043 155 000 174 201 334
// 304 320 302 001 003 212 000 007 045 036 147 044 155 000 174 200 334
// 304 320 302 001 003 212 000 007 045 036 147 045 155 000 174 199 334
// 304 320 302 001 003 212 000 007 045 036 147 046 155 000 174 198 334
// 304 320 302 001 003 212 000 007 045 036 147 047 155 000 174 197 334
// 304 320 302 001 003 212 000 007 045 036 147 048 155 000 174 196 334
// 304 320 302 001 003 212 000 007 045 036 147 049 155 000 174 195 334
// 304 320 302 001 003 212 000 007 045 036 147 050 155 000 174 194 334
// 304 320 302 001 003 212 000 007 045 036 147 051 155 000 174 193 334
// 304 320 302 001 003 212 000 007 045 036 147 052 155 000 174 192 334
// 304 320 302 001 003 212 000 007 045 036 147 053 155 000 174 191 334
// 304 320 302 001 003 212 000 007 045 036 147 054 155 000 174 190 334
// 304 320 302 001 003 212 000 007 045 036 147 055 155 000 174 189 334
// 304 320 302 001 003 212 000 007 045 036 147 056 155 000 174 188 334
// 304 320 302 001 003 212 000 007 045 036 147 057 155 000 174 187 334
// 304 320 302 001 003 212 000 007 045 036 147 058 155 000 174 186 334
// 304 320 302 001 003 212 000 007 045 036 147 059 155 000 174 185 334
// 304 320 302 001 003 212 000 007 045 036 147 060 155 000 174 184 334
// 304 320 302 001 003 212 000 007 045 036 147 060 155 000 174 184 334
// 304 320 302 001 003 212 000 007 045 036 147 062 155 000 174 182 334
// 304 320 302 001 003 212 000 007 045 036 147 063 155 000 174 181 334
// 304 320 302 001 003 212 000 007 045 036 147 064 155 000 174 180 334

let mutable crc = 0uy
let updateCrc generator byteVal =
    // append 8 zero bits to the input byte
    let inputstream = [| byteVal; 0x00uy |]
    // handle each bit of input stream by iterating over each bit of each input byte
    inputstream |> Array.iter (fun b ->
        for i in [7 .. -1 .. 0] do
            // check if MSB is set
            if ((crc &&& 0x80uy) <> 0uy) then
                // MSB set, shift it out of the register
                crc <- (byte)(crc <<< 1) 
                (* shift in next bit of input stream:
                 * If it's 1, set LSB of crc to 1.
                 * If it's 0, set LSB of crc to 0. *)
                crc <- if ((byte)(b &&& (1uy <<< i)) <> 0uy) then (byte)(crc ||| 0x01uy) else (byte)(crc &&& 0xFEuy)
                // Perform the 'division' by XORing the crc register with the generator polynomial
                crc <- (byte)(crc ^^^ generator)
            else
                // MSB not set, shift it out and shift in next bit of input stream. Same as above, just no division
                crc <- (byte)(crc <<< 1);
                crc <- if ((byte)(b &&& (1uy <<< i)) <> 0uy) then (byte)(crc ||| 0x01uy) else (byte)(crc &&& 0xFEuy)
    )

let simpleXor byteVal = crc <- crc ^^^ byteVal
let xorNot byteVal = crc <- crc ^^^ (~~~byteVal)
let notXor byteVal = crc <- ~~~(crc ^^^ byteVal)
let simpleSum byteVal = crc <- crc + byteVal
let simpleDif byteVal = crc <- crc - byteVal

let notAtEnd c = ~~~c

let test (code: byte[]) expect init name f g = seq {
    for s in 0 .. code.Length - 1 do
    for e in code.Length - 1 .. -1 .. 0 do
        let code' = code.[s .. e]
        crc <- init
        Array.iter f code'
        crc <- g crc
        if crc = expect && code'.Length > 2 then
            yield sprintf "Code (name %s, init %i, start: %i): %i %A" name init s crc code' } |> List.ofSeq

let trial code0 expect0 code1 expect1 code2 expect2 code3 expect3 code4 expect4 init name f g =
    let res0 = test code0 expect0 init name f g
    let res1 = test code1 expect1 init name f g
    let res2 = test code2 expect2 init name f g
    let res3 = test code3 expect3 init name f g
    let res4 = test code4 expect4 init name f g
    if res0.Length > 0 && res1.Length > 0 && res2.Length > 0 && res3.Length > 0 && res4.Length > 0 then
        printfn "Res0: %A" res0
        printfn "Res1: %A" res1
        printfn "Res2: %A" res2
        printfn "Res3: %A" res3
        printfn "Res4: %A" res4
        printfn ""

for i in [0uy; 42uy; 255uy] do
    let code0, expect0 = [|001uy; 003uy; 209uy; 000uy; 010uy; 199uy; 045uy; 036uy; 147uy; 001uy; 002uy; 003uy; 184uy; 000uy; 174uy; 010uy|], 10uy
    let code1, expect1 = [|001uy; 003uy; 204uy; 000uy; 015uy; 199uy; 045uy; 036uy; 147uy; 100uy; 155uy; 000uy; 000uy; 000uy; 184uy; 000uy; 030uy; 147uy; 000uy; 174uy; 096uy|], 96uy
    let code2, expect2 = [|001uy; 003uy; 206uy; 000uy; 013uy; 199uy; 045uy; 036uy; 147uy; 000uy; 000uy; 000uy; 184uy; 000uy; 030uy; 147uy; 000uy; 174uy; 095uy|], 95uy
    let code3, expect3 = [|001uy; 003uy; 204uy; 000uy; 015uy; 199uy; 045uy; 036uy; 147uy; 000uy; 000uy; 000uy; 184uy; 000uy; 030uy; 147uy; 100uy; 155uy; 000uy; 174uy; 096uy|], 96uy
    let code4, expect4 = [|001uy; 003uy; 166uy; 000uy; 053uy; 199uy; 045uy; 036uy; 147uy; 144uy; 000uy; 009uy; 000uy; 174uy; 027uy; 146uy; 028uy; 146uy; 029uy; 146uy; 000uy; 100uy; 000uy; 184uy; 080uy; 155uy; 100uy; 000uy; 000uy; 184uy; 050uy; 155uy; 000uy; 100uy; 000uy; 184uy; 080uy; 155uy; 100uy; 100uy; 000uy; 184uy; 050uy; 155uy; 000uy; 100uy; 000uy; 184uy; 080uy; 155uy; 000uy; 000uy; 100uy; 184uy; 050uy; 155uy; 184uy; 145uy; 168uy|], 168uy

    // for g in [0uy .. 255uy] do
    //     trial code0 expect0 code1 expect1 code2 expect2 code3 expect3 code4 expect4 i (sprintf "CRC %i" g) (updateCrc g) id
    trial code0 expect0 code1 expect1 code2 expect2 code3 expect3 code4 expect4 i "xorNot"    xorNot    id
    trial code0 expect0 code1 expect1 code2 expect2 code3 expect3 code4 expect4 i "notXor"    notXor    id
    trial code0 expect0 code1 expect1 code2 expect2 code3 expect3 code4 expect4 i "simpleSum" simpleSum id
    trial code0 expect0 code1 expect1 code2 expect2 code3 expect3 code4 expect4 i "simpleDif" simpleDif id
    trial code0 expect0 code1 expect1 code2 expect2 code3 expect3 code4 expect4 i "simpleXor" simpleXor id
    trial code0 expect0 code1 expect1 code2 expect2 code3 expect3 code4 expect4 i "simpleXor" simpleXor notAtEnd

printfn "Done"

Console.ReadLine() |> ignore